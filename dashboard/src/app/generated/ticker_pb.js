// source: ticker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.StockRequest', null, global);
goog.exportSymbol('proto.proto.StockResponse', null, global);
goog.exportSymbol('proto.proto.SummaryReply', null, global);
goog.exportSymbol('proto.proto.SummaryRequest', null, global);
goog.exportSymbol('proto.proto.SummaryResponse', null, global);
goog.exportSymbol('proto.proto.SummaryResponse.MessageCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StockRequest.displayName = 'proto.proto.StockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StockResponse.displayName = 'proto.proto.StockResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SummaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SummaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SummaryRequest.displayName = 'proto.proto.SummaryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SummaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.SummaryResponse.oneofGroups_);
};
goog.inherits(proto.proto.SummaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SummaryResponse.displayName = 'proto.proto.SummaryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SummaryReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SummaryReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SummaryReply.displayName = 'proto.proto.SummaryReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    close: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    high: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    low: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    date: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StockRequest}
 */
proto.proto.StockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StockRequest;
  return proto.proto.StockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StockRequest}
 */
proto.proto.StockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClose(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHigh(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLow(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.proto.StockRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.StockRequest} returns this
 */
proto.proto.StockRequest.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double close = 2;
 * @return {number}
 */
proto.proto.StockRequest.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StockRequest} returns this
 */
proto.proto.StockRequest.prototype.setClose = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double high = 3;
 * @return {number}
 */
proto.proto.StockRequest.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StockRequest} returns this
 */
proto.proto.StockRequest.prototype.setHigh = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double low = 4;
 * @return {number}
 */
proto.proto.StockRequest.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.StockRequest} returns this
 */
proto.proto.StockRequest.prototype.setLow = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string date = 5;
 * @return {string}
 */
proto.proto.StockRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.StockRequest} returns this
 */
proto.proto.StockRequest.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StockResponse}
 */
proto.proto.StockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StockResponse;
  return proto.proto.StockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StockResponse}
 */
proto.proto.StockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SummaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SummaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SummaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SummaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sas: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SummaryRequest}
 */
proto.proto.SummaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SummaryRequest;
  return proto.proto.SummaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SummaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SummaryRequest}
 */
proto.proto.SummaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SummaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SummaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SummaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SummaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSas();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sas = 1;
 * @return {string}
 */
proto.proto.SummaryRequest.prototype.getSas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SummaryRequest} returns this
 */
proto.proto.SummaryRequest.prototype.setSas = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.SummaryResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.proto.SummaryResponse.MessageCase = {
  MESSAGE_NOT_SET: 0,
  REPLY: 1,
  ERROR: 2
};

/**
 * @return {proto.proto.SummaryResponse.MessageCase}
 */
proto.proto.SummaryResponse.prototype.getMessageCase = function() {
  return /** @type {proto.proto.SummaryResponse.MessageCase} */(jspb.Message.computeOneofCase(this, proto.proto.SummaryResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SummaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SummaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SummaryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SummaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reply: (f = msg.getReply()) && proto.proto.SummaryReply.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SummaryResponse}
 */
proto.proto.SummaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SummaryResponse;
  return proto.proto.SummaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SummaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SummaryResponse}
 */
proto.proto.SummaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.SummaryReply;
      reader.readMessage(value,proto.proto.SummaryReply.deserializeBinaryFromReader);
      msg.setReply(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SummaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SummaryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SummaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SummaryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReply();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.SummaryReply.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional SummaryReply reply = 1;
 * @return {?proto.proto.SummaryReply}
 */
proto.proto.SummaryResponse.prototype.getReply = function() {
  return /** @type{?proto.proto.SummaryReply} */ (
    jspb.Message.getWrapperField(this, proto.proto.SummaryReply, 1));
};


/**
 * @param {?proto.proto.SummaryReply|undefined} value
 * @return {!proto.proto.SummaryResponse} returns this
*/
proto.proto.SummaryResponse.prototype.setReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.SummaryResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SummaryResponse} returns this
 */
proto.proto.SummaryResponse.prototype.clearReply = function() {
  return this.setReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SummaryResponse.prototype.hasReply = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.proto.SummaryResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SummaryResponse} returns this
 */
proto.proto.SummaryResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.SummaryResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.SummaryResponse} returns this
 */
proto.proto.SummaryResponse.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.SummaryResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SummaryResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SummaryReply.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SummaryReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SummaryReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SummaryReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    close: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    high: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    low: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    average: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    minlp3: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    ema5: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    ema20: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    rsi: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    hl3: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    trend: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    buy: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    support: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    bullish: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    barish: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    previousbuy: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SummaryReply}
 */
proto.proto.SummaryReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SummaryReply;
  return proto.proto.SummaryReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SummaryReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SummaryReply}
 */
proto.proto.SummaryReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClose(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHigh(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAverage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinlp3(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEma5(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEma20(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRsi(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHl3(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTrend(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBuy(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSupport(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBullish(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBarish(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPreviousbuy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SummaryReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SummaryReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SummaryReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SummaryReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAverage();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMinlp3();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEma5();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getEma20();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getRsi();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getHl3();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTrend();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getBuy();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getSupport();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getBullish();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getBarish();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getPreviousbuy();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
};


/**
 * optional double close = 1;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setClose = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double high = 2;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setHigh = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double low = 3;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setLow = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double average = 4;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getAverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setAverage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double minLP3 = 5;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getMinlp3 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setMinlp3 = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double ema5 = 6;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getEma5 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setEma5 = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double ema20 = 7;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getEma20 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setEma20 = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double rsi = 8;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getRsi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setRsi = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double hl3 = 9;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getHl3 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setHl3 = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double trend = 10;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getTrend = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setTrend = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double buy = 11;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getBuy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setBuy = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double support = 12;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getSupport = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setSupport = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double bullish = 13;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getBullish = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setBullish = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double barish = 14;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getBarish = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setBarish = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double previousBuy = 15;
 * @return {number}
 */
proto.proto.SummaryReply.prototype.getPreviousbuy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SummaryReply} returns this
 */
proto.proto.SummaryReply.prototype.setPreviousbuy = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


goog.object.extend(exports, proto.proto);

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickerClient is the client API for Ticker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerClient interface {
	UpdateStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	GetSummary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (Ticker_GetSummaryClient, error)
}

type tickerClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerClient(cc grpc.ClientConnInterface) TickerClient {
	return &tickerClient{cc}
}

func (c *tickerClient) UpdateStock(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, "/proto.Ticker/UpdateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerClient) GetSummary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (Ticker_GetSummaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ticker_ServiceDesc.Streams[0], "/proto.Ticker/GetSummary", opts...)
	if err != nil {
		return nil, err
	}
	x := &tickerGetSummaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ticker_GetSummaryClient interface {
	Recv() (*SummaryReply, error)
	grpc.ClientStream
}

type tickerGetSummaryClient struct {
	grpc.ClientStream
}

func (x *tickerGetSummaryClient) Recv() (*SummaryReply, error) {
	m := new(SummaryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TickerServer is the server API for Ticker service.
// All implementations must embed UnimplementedTickerServer
// for forward compatibility
type TickerServer interface {
	UpdateStock(context.Context, *StockRequest) (*StockResponse, error)
	GetSummary(*SummaryRequest, Ticker_GetSummaryServer) error
	mustEmbedUnimplementedTickerServer()
}

// UnimplementedTickerServer must be embedded to have forward compatible implementations.
type UnimplementedTickerServer struct {
}

func (UnimplementedTickerServer) UpdateStock(context.Context, *StockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedTickerServer) GetSummary(*SummaryRequest, Ticker_GetSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedTickerServer) mustEmbedUnimplementedTickerServer() {}

// UnsafeTickerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerServer will
// result in compilation errors.
type UnsafeTickerServer interface {
	mustEmbedUnimplementedTickerServer()
}

func RegisterTickerServer(s grpc.ServiceRegistrar, srv TickerServer) {
	s.RegisterService(&Ticker_ServiceDesc, srv)
}

func _Ticker_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Ticker/UpdateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).UpdateStock(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticker_GetSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TickerServer).GetSummary(m, &tickerGetSummaryServer{stream})
}

type Ticker_GetSummaryServer interface {
	Send(*SummaryReply) error
	grpc.ServerStream
}

type tickerGetSummaryServer struct {
	grpc.ServerStream
}

func (x *tickerGetSummaryServer) Send(m *SummaryReply) error {
	return x.ServerStream.SendMsg(m)
}

// Ticker_ServiceDesc is the grpc.ServiceDesc for Ticker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Ticker",
	HandlerType: (*TickerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStock",
			Handler:    _Ticker_UpdateStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSummary",
			Handler:       _Ticker_GetSummary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticker.proto",
}
